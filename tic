<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="style.css">
    <title>tic tac toe</title>
</head>
<body>
    <table>
        <tr>
            <td class="cell" id="0"></td>
            <td class="cell" id="1"></td>
            <td class="cell" id="2"></td>
        </tr>
        <tr>
            <td class="cell" id="3"></td>
            <td class="cell" id="4"></td>
            <td class="cell" id="5"></td>
        </tr>
        <tr>
            <td class="cell" id="6"></td>
            <td class="cell" id="7"></td>
            <td class="cell" id="8"></td>
        </tr>
    </table>

    <div class="endgame">
        <div class="text"></div>
    </div>
    <button onclick="startGame()">Replay</button>
   <script src="script.js"></script>
</body>
</html>




body{
    background-color: aqua;
}
td {
    border: 2px solid #333;
    height: 100px;
    width: 100px;
    text-align: center;
    vertical-align: center;
    font-family: cursive, sans-serif;   
    font-size: 70px;
    cursor: pointer;
  }
  table {
    border-collapse: collapse;
    position: absolute;
    left: 50%;
    margin-left: -155px;
    top: 50px;
  }
  
  table tr:first-child td {
    border-top: 0;
  }
  table tr:last-child td {
    border-bottom: 0;
  }
  table tr td:first-child {
    border-left: 0;
  }
  table tr td:last-child {
    border-right: 0;
  }
  
  .endgame {
    display: none;
    width: 200px;
    top: 155px;
    background-color: black;       
    position: absolute;
    left: 50%;
    margin-left: -100px;
    padding: 50px 0;
    text-align: center;
    color: white;
    font-size: 2em;
    border-radius: 5px;
  }
  
  
  
  
  var origBoard;
const huPlayer = "O";
const aiPlayer = "X";
const winCombos = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [6, 4, 2],
];
const cells = document.querySelectorAll(".cell");
startGame();

function startGame() {
    document.querySelector(".endgame").style.display = "none";
    origBoard = Array.from(Array(9).keys());
    //[0,1,2,3,4,5,6,7,8]
    //   console.log(origBoard);
    for (var i = 0; i < cells.length; i++) {
        cells[i].innerText = "";
        cells[i].style.removeProperty("background-color");
        cells[i].addEventListener("click", turnClick, false);
    }
}
function turnClick(square) {
    //   console.log(square.target.id);cell id
    //   turn(square.target.id, huPlayer);
    if (typeof origBoard[square.target.id] == 'number') {
        turn(square.target.id, huPlayer);
        if(!checkTie()) turn(bestSpot(), aiPlayer);
    }
}
function checkTie(){
    if(emptySquares().length==0){
        for(var i=0;i<cells.length;i++){
            cells[i].style.backgroundColor="green";
            cells[i].removeEventListener('click', turnClick, false);

        }
        declareWinner("Tie Game");
        return true;
    }
}

function turn(squareId, player) {
    origBoard[squareId] = player;
    // at id 2 if '0'
    //origBoard [0,1,2,'0',3,4,...]
    document.getElementById(squareId).innerText = player;
    let gameWon = checkWin(origBoard, player);
    if (gameWon) gameOver(gameWon);
}

function checkWin(board, player) {
    //huplayer '0' aiplayer 'X'
    // [0,1,'0','0',4,'0','X',7,8]
    let plays = board.reduce((a, e, i) => (e === player ? a.concat(i) : a), []);
    let gameWon = null;
    for (let [index, win] of winCombos.entries()) {
        if (win.every((elem) => plays.indexOf(elem) > -1)) {
            //game won
            gameWon = { index: index, player: player };
            break;
        }
    }
    return gameWon;
}

function gameOver(gameWon) {
    for (let index of winCombos[gameWon.index]) {
        document.getElementById(index).style.backgroundColor =
            gameWon.player == huPlayer ? "yellow" : "red";
    }
    for (var i = 0; i < cells.length; i++) {
        cells[i].removeEventListener("click", turnClick, false);
    }
    declareWinner(gameWon.player == huPlayer ? "You win!" : "You lose.");

}

function declareWinner(who) {
  //who -> you won! or you lose
  document.querySelector(".endgame").style.display = "block";
  document.querySelector(".endgame .text").innerText = who;
}

function emptySquares() {
  return origBoard.filter((s) => typeof s == "number");
}

function bestSpot() {
  return emptySquares()[0];
}
